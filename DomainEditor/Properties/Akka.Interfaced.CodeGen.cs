// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region DomainEditor.IEditorConnection

namespace DomainEditor
{
    [PayloadTable(typeof(IEditorConnection), PayloadTableKind.Request)]
    public static class IEditorConnection_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetPrefabs_Invoke), typeof(GetPrefabs_Return) },
                { typeof(GetSceneList_Invoke), typeof(GetSceneList_Return) },
                { typeof(GetServerInfo_Invoke), typeof(GetServerInfo_Return) },
            };
        }

        public class GetPrefabs_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IEditorConnection)__target).GetPrefabs();
                return (IValueGetable)(new GetPrefabs_Return { v = __v });
            }
        }

        public class GetPrefabs_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainEditor.EditorPrefabInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetSceneList_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IEditorConnection)__target).GetSceneList();
                return (IValueGetable)(new GetSceneList_Return { v = __v });
            }
        }

        public class GetSceneList_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<System.Tuple<System.Guid, string, string>> v;

            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetServerInfo_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IEditorConnection)__target).GetServerInfo();
                return (IValueGetable)(new GetServerInfo_Return { v = __v });
            }
        }

        public class GetServerInfo_Return
            : IInterfacedPayload, IValueGetable
        {
            public Domain.ServerInfo v;

            public Type GetInterfaceType()
            {
                return typeof(IEditorConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IEditorConnection_NoReply
    {
        void GetPrefabs();
        void GetSceneList();
        void GetServerInfo();
    }

    public class EditorConnectionRef : InterfacedActorRef, IEditorConnection, IEditorConnection_NoReply
    {
        public override Type InterfaceType => typeof(IEditorConnection);

        public EditorConnectionRef() : base(null)
        {
        }

        public EditorConnectionRef(IRequestTarget target) : base(target)
        {
        }

        public EditorConnectionRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IEditorConnection_NoReply WithNoReply()
        {
            return this;
        }

        public EditorConnectionRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new EditorConnectionRef(Target, requestWaiter, Timeout);
        }

        public EditorConnectionRef WithTimeout(TimeSpan? timeout)
        {
            return new EditorConnectionRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Collections.Generic.List<DomainEditor.EditorPrefabInfo>> GetPrefabs()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetPrefabs_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainEditor.EditorPrefabInfo>>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.Tuple<System.Guid, string, string>>> GetSceneList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetSceneList_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.Tuple<System.Guid, string, string>>>(requestMessage);
        }

        public Task<Domain.ServerInfo> GetServerInfo()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetServerInfo_Invoke {  }
            };
            return SendRequestAndReceive<Domain.ServerInfo>(requestMessage);
        }

        void IEditorConnection_NoReply.GetPrefabs()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetPrefabs_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IEditorConnection_NoReply.GetSceneList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetSceneList_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IEditorConnection_NoReply.GetServerInfo()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IEditorConnection_PayloadTable.GetServerInfo_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IEditorConnection))]
    public interface IEditorConnectionSync : IInterfacedActorSync
    {
        System.Collections.Generic.List<DomainEditor.EditorPrefabInfo> GetPrefabs();
        System.Collections.Generic.List<System.Tuple<System.Guid, string, string>> GetSceneList();
        Domain.ServerInfo GetServerInfo();
    }
}

#endregion
