// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using Akka.Interfaced;
using System.Threading.Tasks;
using Akka.Actor;

#region Domain.IAbstractActor

namespace Domain
{
    [PayloadTable(typeof(IAbstractActor), PayloadTableKind.Request)]
    public static class IAbstractActor_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetGuid_Invoke), typeof(GetGuid_Return) },
                { typeof(GetOwnerId_Invoke), typeof(GetOwnerId_Return) },
            };
        }

        public class GetGuid_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IAbstractActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IAbstractActor)__target).GetGuid();
                return (IValueGetable)(new GetGuid_Return { v = __v });
            }
        }

        public class GetGuid_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Guid v;

            public Type GetInterfaceType()
            {
                return typeof(IAbstractActor);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetOwnerId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IAbstractActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IAbstractActor)__target).GetOwnerId();
                return (IValueGetable)(new GetOwnerId_Return { v = __v });
            }
        }

        public class GetOwnerId_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Guid v;

            public Type GetInterfaceType()
            {
                return typeof(IAbstractActor);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface IAbstractActor_NoReply
    {
        void GetGuid();
        void GetOwnerId();
    }

    public class AbstractActorRef : InterfacedActorRef, IAbstractActor, IAbstractActor_NoReply
    {
        public override Type InterfaceType => typeof(IAbstractActor);

        public AbstractActorRef() : base(null)
        {
        }

        public AbstractActorRef(IRequestTarget target) : base(target)
        {
        }

        public AbstractActorRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IAbstractActor_NoReply WithNoReply()
        {
            return this;
        }

        public AbstractActorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new AbstractActorRef(Target, requestWaiter, Timeout);
        }

        public AbstractActorRef WithTimeout(TimeSpan? timeout)
        {
            return new AbstractActorRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Guid> GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<System.Guid> GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        void IAbstractActor_NoReply.GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IAbstractActor))]
    public interface IAbstractActorSync : IInterfacedActorSync
    {
        System.Guid GetGuid();
        System.Guid GetOwnerId();
    }
}

#endregion
#region Domain.IClientConnection

namespace Domain
{
    [PayloadTable(typeof(IClientConnection), PayloadTableKind.Request)]
    public static class IClientConnection_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(KillConnection_Invoke), null },
                { typeof(RegisterConnection_Invoke), null },
            };
        }

        public class KillConnection_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IClientConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IClientConnection)__target).KillConnection();
                return null;
            }
        }

        public class RegisterConnection_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientID;
            public string scene;

            public Type GetInterfaceType()
            {
                return typeof(IClientConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IClientConnection)__target).RegisterConnection(clientID, scene);
                return null;
            }
        }
    }

    public interface IClientConnection_NoReply
    {
        void KillConnection();
        void RegisterConnection(System.Guid clientID, string scene);
    }

    public class ClientConnectionRef : InterfacedActorRef, IClientConnection, IClientConnection_NoReply
    {
        public override Type InterfaceType => typeof(IClientConnection);

        public ClientConnectionRef() : base(null)
        {
        }

        public ClientConnectionRef(IRequestTarget target) : base(target)
        {
        }

        public ClientConnectionRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IClientConnection_NoReply WithNoReply()
        {
            return this;
        }

        public ClientConnectionRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ClientConnectionRef(Target, requestWaiter, Timeout);
        }

        public ClientConnectionRef WithTimeout(TimeSpan? timeout)
        {
            return new ClientConnectionRef(Target, RequestWaiter, timeout);
        }

        public Task KillConnection()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IClientConnection_PayloadTable.KillConnection_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task RegisterConnection(System.Guid clientID, string scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IClientConnection_PayloadTable.RegisterConnection_Invoke { clientID = clientID, scene = scene }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IClientConnection_NoReply.KillConnection()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IClientConnection_PayloadTable.KillConnection_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IClientConnection_NoReply.RegisterConnection(System.Guid clientID, string scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IClientConnection_PayloadTable.RegisterConnection_Invoke { clientID = clientID, scene = scene }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IClientConnection))]
    public interface IClientConnectionSync : IInterfacedActorSync
    {
        void KillConnection();
        void RegisterConnection(System.Guid clientID, string scene);
    }
}

#endregion
#region Domain.IConnection

namespace Domain
{
    [PayloadTable(typeof(IConnection), PayloadTableKind.Request)]
    public static class IConnection_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(AddLoadedScene_Invoke), null },
                { typeof(DoLogin_Invoke), typeof(DoLogin_Return) },
                { typeof(DoLogout_Invoke), null },
                { typeof(NotifySceneLoaded_Invoke), null },
                { typeof(RegisterClient_Invoke), typeof(RegisterClient_Return) },
                { typeof(SpawnGameObject_Invoke), null },
                { typeof(TestConnection_Invoke), null },
            };
        }

        public class AddLoadedScene_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid sceneId;
            public Domain.ISceneActor scene;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IConnection)__target).AddLoadedScene(sceneId, scene);
                return null;
            }
        }

        public class DoLogin_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string username;
            public string password;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IConnection)__target).DoLogin(username, password);
                return (IValueGetable)(new DoLogin_Return { v = __v });
            }
        }

        public class DoLogin_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Tuple<bool, string, Domain.ServerInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class DoLogout_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IConnection)__target).DoLogout(clientId);
                return null;
            }
        }

        public class NotifySceneLoaded_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;
            public System.Guid sceneId;
            public string username;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IConnection)__target).NotifySceneLoaded(clientId, sceneId, username);
                return null;
            }
        }

        public class RegisterClient_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public System.Guid clientId;
            public System.Guid sceneId;
            public Domain.IConnectionObserver client;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IConnection)__target).RegisterClient(clientId, sceneId, client);
                return (IValueGetable)(new RegisterClient_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (client != null)
                {
                    updater(client);
                }
            }
        }

        public class RegisterClient_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            public Domain.ISceneActor v;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    updater(v); 
                }
            }
        }

        public class SpawnGameObject_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string namePrefab;
            public string nameNotOwnedPrefab;
            public System.Guid localID;
            public System.Guid ownerId;
            public System.Guid bundleId;
            public System.Guid avatarId;
            public Domain.IGameObject obj;
            public string address;

            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IConnection)__target).SpawnGameObject(namePrefab, nameNotOwnedPrefab, localID, ownerId, bundleId, avatarId, obj, address);
                return null;
            }
        }

        public class TestConnection_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IConnection)__target).TestConnection();
                return null;
            }
        }
    }

    public interface IConnection_NoReply : IAbstractActor_NoReply
    {
        void AddLoadedScene(System.Guid sceneId, Domain.ISceneActor scene);
        void DoLogin(string username, string password);
        void DoLogout(System.Guid clientId);
        void NotifySceneLoaded(System.Guid clientId, System.Guid sceneId, string username);
        void RegisterClient(System.Guid clientId, System.Guid sceneId, Domain.IConnectionObserver client);
        void SpawnGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localID, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, Domain.IGameObject obj, string address);
        void TestConnection();
    }

    public class ConnectionRef : InterfacedActorRef, IConnection, IConnection_NoReply
    {
        public override Type InterfaceType => typeof(IConnection);

        public ConnectionRef() : base(null)
        {
        }

        public ConnectionRef(IRequestTarget target) : base(target)
        {
        }

        public ConnectionRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IConnection_NoReply WithNoReply()
        {
            return this;
        }

        public ConnectionRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ConnectionRef(Target, requestWaiter, Timeout);
        }

        public ConnectionRef WithTimeout(TimeSpan? timeout)
        {
            return new ConnectionRef(Target, RequestWaiter, timeout);
        }

        public Task AddLoadedScene(System.Guid sceneId, Domain.ISceneActor scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.AddLoadedScene_Invoke { sceneId = sceneId, scene = scene }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Tuple<bool, string, Domain.ServerInfo>> DoLogin(string username, string password)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.DoLogin_Invoke { username = username, password = password }
            };
            return SendRequestAndReceive<System.Tuple<bool, string, Domain.ServerInfo>>(requestMessage);
        }

        public Task DoLogout(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.DoLogout_Invoke { clientId = clientId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task NotifySceneLoaded(System.Guid clientId, System.Guid sceneId, string username)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.NotifySceneLoaded_Invoke { clientId = clientId, sceneId = sceneId, username = username }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<Domain.ISceneActor> RegisterClient(System.Guid clientId, System.Guid sceneId, Domain.IConnectionObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.RegisterClient_Invoke { clientId = clientId, sceneId = sceneId, client = (ConnectionObserver)client }
            };
            return SendRequestAndReceive<Domain.ISceneActor>(requestMessage);
        }

        public Task SpawnGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localID, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, Domain.IGameObject obj, string address)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.SpawnGameObject_Invoke { namePrefab = namePrefab, nameNotOwnedPrefab = nameNotOwnedPrefab, localID = localID, ownerId = ownerId, bundleId = bundleId, avatarId = avatarId, obj = obj, address = address }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task TestConnection()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.TestConnection_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Guid> GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<System.Guid> GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        void IConnection_NoReply.AddLoadedScene(System.Guid sceneId, Domain.ISceneActor scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.AddLoadedScene_Invoke { sceneId = sceneId, scene = scene }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.DoLogin(string username, string password)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.DoLogin_Invoke { username = username, password = password }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.DoLogout(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.DoLogout_Invoke { clientId = clientId }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.NotifySceneLoaded(System.Guid clientId, System.Guid sceneId, string username)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.NotifySceneLoaded_Invoke { clientId = clientId, sceneId = sceneId, username = username }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.RegisterClient(System.Guid clientId, System.Guid sceneId, Domain.IConnectionObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.RegisterClient_Invoke { clientId = clientId, sceneId = sceneId, client = (ConnectionObserver)client }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.SpawnGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localID, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, Domain.IGameObject obj, string address)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.SpawnGameObject_Invoke { namePrefab = namePrefab, nameNotOwnedPrefab = nameNotOwnedPrefab, localID = localID, ownerId = ownerId, bundleId = bundleId, avatarId = avatarId, obj = obj, address = address }
            };
            SendRequest(requestMessage);
        }

        void IConnection_NoReply.TestConnection()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IConnection_PayloadTable.TestConnection_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IConnection))]
    public interface IConnectionSync : IAbstractActorSync
    {
        void AddLoadedScene(System.Guid sceneId, Domain.ISceneActor scene);
        System.Tuple<bool, string, Domain.ServerInfo> DoLogin(string username, string password);
        void DoLogout(System.Guid clientId);
        void NotifySceneLoaded(System.Guid clientId, System.Guid sceneId, string username);
        Domain.ISceneActor RegisterClient(System.Guid clientId, System.Guid sceneId, Domain.IConnectionObserver client);
        void SpawnGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localID, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, Domain.IGameObject obj, string address);
        void TestConnection();
    }
}

#endregion
#region Domain.IGameObject

namespace Domain
{
    [PayloadTable(typeof(IGameObject), PayloadTableKind.Request)]
    public static class IGameObject_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(DestroyObject_Invoke), null },
                { typeof(GetAvatarId_Invoke), typeof(GetAvatarId_Return) },
                { typeof(GetAvatarProps_Invoke), typeof(GetAvatarProps_Return) },
                { typeof(GetBundleId_Invoke), typeof(GetBundleId_Return) },
                { typeof(GetMessageCount_Invoke), typeof(GetMessageCount_Return) },
                { typeof(GetNameOfOthersPrefab_Invoke), typeof(GetNameOfOthersPrefab_Return) },
                { typeof(GetNameOfPrefab_Invoke), typeof(GetNameOfPrefab_Return) },
                { typeof(GetServerAddress_Invoke), typeof(GetServerAddress_Return) },
                { typeof(GetSnapshot_Invoke), typeof(GetSnapshot_Return) },
                { typeof(RegisterClient_Invoke), null },
                { typeof(SaveToDB_Invoke), null },
                { typeof(SendBehaviourMessagePackToServer_Invoke), null },
                { typeof(SendBehaviourMessageToServer_Invoke), null },
                { typeof(SetAvatarProps_Invoke), null },
                { typeof(UnregisterClient_Invoke), null },
            };
        }

        public class DestroyObject_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).DestroyObject();
                return null;
            }
        }

        public class GetAvatarId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetAvatarId();
                return (IValueGetable)(new GetAvatarId_Return { v = __v });
            }
        }

        public class GetAvatarId_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Guid v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetAvatarProps_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetAvatarProps();
                return (IValueGetable)(new GetAvatarProps_Return { v = __v });
            }
        }

        public class GetAvatarProps_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetBundleId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetBundleId();
                return (IValueGetable)(new GetBundleId_Return { v = __v });
            }
        }

        public class GetBundleId_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Guid v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetMessageCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetMessageCount();
                return (IValueGetable)(new GetMessageCount_Return { v = __v });
            }
        }

        public class GetMessageCount_Return
            : IInterfacedPayload, IValueGetable
        {
            public int v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetNameOfOthersPrefab_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetNameOfOthersPrefab();
                return (IValueGetable)(new GetNameOfOthersPrefab_Return { v = __v });
            }
        }

        public class GetNameOfOthersPrefab_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetNameOfPrefab_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetNameOfPrefab();
                return (IValueGetable)(new GetNameOfPrefab_Return { v = __v });
            }
        }

        public class GetNameOfPrefab_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetServerAddress_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetServerAddress();
                return (IValueGetable)(new GetServerAddress_Return { v = __v });
            }
        }

        public class GetServerAddress_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetSnapshot_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGameObject)__target).GetSnapshot();
                return (IValueGetable)(new GetSnapshot_Return { v = __v });
            }
        }

        public class GetSnapshot_Return
            : IInterfacedPayload, IValueGetable
        {
            public Domain.ObjectSnapshot v;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class RegisterClient_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public System.Guid clientId;
            public Domain.IGameObjectObserver client;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).RegisterClient(clientId, client);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (client != null)
                {
                    updater(client);
                }
            }
        }

        public class SaveToDB_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).SaveToDB();
                return null;
            }
        }

        public class SendBehaviourMessagePackToServer_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;
            public Domain.BehaviourMessages.JediumBehaviourMessage[] messages;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).SendBehaviourMessagePackToServer(clientId, messages);
                return null;
            }
        }

        public class SendBehaviourMessageToServer_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;
            public Domain.BehaviourMessages.JediumBehaviourMessage message;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).SendBehaviourMessageToServer(clientId, message);
                return null;
            }
        }

        public class SetAvatarProps_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string props;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).SetAvatarProps(props);
                return null;
            }
        }

        public class UnregisterClient_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObject);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameObject)__target).UnregisterClient(clientId);
                return null;
            }
        }
    }

    public interface IGameObject_NoReply : IAbstractActor_NoReply
    {
        void DestroyObject();
        void GetAvatarId();
        void GetAvatarProps();
        void GetBundleId();
        void GetMessageCount();
        void GetNameOfOthersPrefab();
        void GetNameOfPrefab();
        void GetServerAddress();
        void GetSnapshot();
        void RegisterClient(System.Guid clientId, Domain.IGameObjectObserver client);
        void SaveToDB();
        void SendBehaviourMessagePackToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage[] messages);
        void SendBehaviourMessageToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage message);
        void SetAvatarProps(string props);
        void UnregisterClient(System.Guid clientId);
    }

    public class GameObjectRef : InterfacedActorRef, IGameObject, IGameObject_NoReply
    {
        public override Type InterfaceType => typeof(IGameObject);

        public GameObjectRef() : base(null)
        {
        }

        public GameObjectRef(IRequestTarget target) : base(target)
        {
        }

        public GameObjectRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IGameObject_NoReply WithNoReply()
        {
            return this;
        }

        public GameObjectRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameObjectRef(Target, requestWaiter, Timeout);
        }

        public GameObjectRef WithTimeout(TimeSpan? timeout)
        {
            return new GameObjectRef(Target, RequestWaiter, timeout);
        }

        public Task DestroyObject()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.DestroyObject_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Guid> GetAvatarId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetAvatarId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<string> GetAvatarProps()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetAvatarProps_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<System.Guid> GetBundleId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetBundleId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<int> GetMessageCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetMessageCount_Invoke {  }
            };
            return SendRequestAndReceive<int>(requestMessage);
        }

        public Task<string> GetNameOfOthersPrefab()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetNameOfOthersPrefab_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<string> GetNameOfPrefab()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetNameOfPrefab_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<string> GetServerAddress()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetServerAddress_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<Domain.ObjectSnapshot> GetSnapshot()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetSnapshot_Invoke {  }
            };
            return SendRequestAndReceive<Domain.ObjectSnapshot>(requestMessage);
        }

        public Task RegisterClient(System.Guid clientId, Domain.IGameObjectObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.RegisterClient_Invoke { clientId = clientId, client = (GameObjectObserver)client }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SaveToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SaveToDB_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SendBehaviourMessagePackToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage[] messages)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SendBehaviourMessagePackToServer_Invoke { clientId = clientId, messages = messages }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SendBehaviourMessageToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage message)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SendBehaviourMessageToServer_Invoke { clientId = clientId, message = message }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SetAvatarProps(string props)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SetAvatarProps_Invoke { props = props }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterClient(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.UnregisterClient_Invoke { clientId = clientId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Guid> GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<System.Guid> GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        void IGameObject_NoReply.DestroyObject()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.DestroyObject_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetAvatarId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetAvatarId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetAvatarProps()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetAvatarProps_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetBundleId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetBundleId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetMessageCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetMessageCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetNameOfOthersPrefab()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetNameOfOthersPrefab_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetNameOfPrefab()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetNameOfPrefab_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetServerAddress()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetServerAddress_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.GetSnapshot()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.GetSnapshot_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.RegisterClient(System.Guid clientId, Domain.IGameObjectObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.RegisterClient_Invoke { clientId = clientId, client = (GameObjectObserver)client }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.SaveToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SaveToDB_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.SendBehaviourMessagePackToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage[] messages)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SendBehaviourMessagePackToServer_Invoke { clientId = clientId, messages = messages }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.SendBehaviourMessageToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage message)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SendBehaviourMessageToServer_Invoke { clientId = clientId, message = message }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.SetAvatarProps(string props)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.SetAvatarProps_Invoke { props = props }
            };
            SendRequest(requestMessage);
        }

        void IGameObject_NoReply.UnregisterClient(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameObject_PayloadTable.UnregisterClient_Invoke { clientId = clientId }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IGameObject))]
    public interface IGameObjectSync : IAbstractActorSync
    {
        void DestroyObject();
        System.Guid GetAvatarId();
        string GetAvatarProps();
        System.Guid GetBundleId();
        int GetMessageCount();
        string GetNameOfOthersPrefab();
        string GetNameOfPrefab();
        string GetServerAddress();
        Domain.ObjectSnapshot GetSnapshot();
        void RegisterClient(System.Guid clientId, Domain.IGameObjectObserver client);
        void SaveToDB();
        void SendBehaviourMessagePackToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage[] messages);
        void SendBehaviourMessageToServer(System.Guid clientId, Domain.BehaviourMessages.JediumBehaviourMessage message);
        void SetAvatarProps(string props);
        void UnregisterClient(System.Guid clientId);
    }
}

#endregion
#region Domain.ISceneActor

namespace Domain
{
    [PayloadTable(typeof(ISceneActor), PayloadTableKind.Request)]
    public static class ISceneActor_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetBundleId_Invoke), typeof(GetBundleId_Return) },
                { typeof(GetSceneName_Invoke), typeof(GetSceneName_Return) },
                { typeof(GetSceneObjects_Invoke), typeof(GetSceneObjects_Return) },
                { typeof(GetServerName_Invoke), typeof(GetServerName_Return) },
                { typeof(LoadSceneObjects_Invoke), null },
                { typeof(LogoutClient_Invoke), null },
                { typeof(PushObjectsToClient_Invoke), null },
                { typeof(SaveObjectsToDB_Invoke), null },
            };
        }

        public class GetBundleId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ISceneActor)__target).GetBundleId();
                return (IValueGetable)(new GetBundleId_Return { v = __v });
            }
        }

        public class GetBundleId_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Guid v;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetSceneName_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ISceneActor)__target).GetSceneName();
                return (IValueGetable)(new GetSceneName_Return { v = __v });
            }
        }

        public class GetSceneName_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetSceneObjects_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ISceneActor)__target).GetSceneObjects();
                return (IValueGetable)(new GetSceneObjects_Return { v = __v });
            }
        }

        public class GetSceneObjects_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<System.Tuple<System.Guid, string>> v;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetServerName_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ISceneActor)__target).GetServerName();
                return (IValueGetable)(new GetServerName_Return { v = __v });
            }
        }

        public class GetServerName_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class LoadSceneObjects_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISceneActor)__target).LoadSceneObjects();
                return null;
            }
        }

        public class LogoutClient_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid clientId;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISceneActor)__target).LogoutClient(clientId);
                return null;
            }
        }

        public class PushObjectsToClient_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            public System.Guid clientId;
            public Domain.IConnectionObserver client;

            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISceneActor)__target).PushObjectsToClient(clientId, client);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (client != null)
                {
                    updater(client);
                }
            }
        }

        public class SaveObjectsToDB_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ISceneActor);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((ISceneActor)__target).SaveObjectsToDB();
                return null;
            }
        }
    }

    public interface ISceneActor_NoReply : IAbstractActor_NoReply
    {
        void GetBundleId();
        void GetSceneName();
        void GetSceneObjects();
        void GetServerName();
        void LoadSceneObjects();
        void LogoutClient(System.Guid clientId);
        void PushObjectsToClient(System.Guid clientId, Domain.IConnectionObserver client);
        void SaveObjectsToDB();
    }

    public class SceneActorRef : InterfacedActorRef, ISceneActor, ISceneActor_NoReply
    {
        public override Type InterfaceType => typeof(ISceneActor);

        public SceneActorRef() : base(null)
        {
        }

        public SceneActorRef(IRequestTarget target) : base(target)
        {
        }

        public SceneActorRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ISceneActor_NoReply WithNoReply()
        {
            return this;
        }

        public SceneActorRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new SceneActorRef(Target, requestWaiter, Timeout);
        }

        public SceneActorRef WithTimeout(TimeSpan? timeout)
        {
            return new SceneActorRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Guid> GetBundleId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetBundleId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<string> GetSceneName()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetSceneName_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.Tuple<System.Guid, string>>> GetSceneObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetSceneObjects_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.Tuple<System.Guid, string>>>(requestMessage);
        }

        public Task<string> GetServerName()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetServerName_Invoke {  }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task LoadSceneObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.LoadSceneObjects_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task LogoutClient(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.LogoutClient_Invoke { clientId = clientId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task PushObjectsToClient(System.Guid clientId, Domain.IConnectionObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.PushObjectsToClient_Invoke { clientId = clientId, client = (ConnectionObserver)client }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SaveObjectsToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.SaveObjectsToDB_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Guid> GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        public Task<System.Guid> GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            return SendRequestAndReceive<System.Guid>(requestMessage);
        }

        void ISceneActor_NoReply.GetBundleId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetBundleId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.GetSceneName()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetSceneName_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.GetSceneObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetSceneObjects_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.GetServerName()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.GetServerName_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.LoadSceneObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.LoadSceneObjects_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.LogoutClient(System.Guid clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.LogoutClient_Invoke { clientId = clientId }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.PushObjectsToClient(System.Guid clientId, Domain.IConnectionObserver client)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.PushObjectsToClient_Invoke { clientId = clientId, client = (ConnectionObserver)client }
            };
            SendRequest(requestMessage);
        }

        void ISceneActor_NoReply.SaveObjectsToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ISceneActor_PayloadTable.SaveObjectsToDB_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetGuid()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetGuid_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IAbstractActor_NoReply.GetOwnerId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IAbstractActor_PayloadTable.GetOwnerId_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(ISceneActor))]
    public interface ISceneActorSync : IAbstractActorSync
    {
        System.Guid GetBundleId();
        string GetSceneName();
        System.Collections.Generic.List<System.Tuple<System.Guid, string>> GetSceneObjects();
        string GetServerName();
        void LoadSceneObjects();
        void LogoutClient(System.Guid clientId);
        void PushObjectsToClient(System.Guid clientId, Domain.IConnectionObserver client);
        void SaveObjectsToDB();
    }
}

#endregion
#region Domain.IConnectionObserver

namespace Domain
{
    [PayloadTable(typeof(IConnectionObserver), PayloadTableKind.Notification)]
    public static class IConnectionObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(ClientLoggedIn_Invoke),
                typeof(OnSpawnedGameObject_Invoke),
            };
        }

        public class ClientLoggedIn_Invoke : IInterfacedPayload, IInvokable
        {
            public System.Guid clientid;

            public Type GetInterfaceType()
            {
                return typeof(IConnectionObserver);
            }

            public void Invoke(object __target)
            {
                ((IConnectionObserver)__target).ClientLoggedIn(clientid);
            }
        }

        public class OnSpawnedGameObject_Invoke : IInterfacedPayload, IInvokable
        {
            public string namePrefab;
            public string nameNotOwnedPrefab;
            public System.Guid localId;
            public System.Guid ownerId;
            public System.Guid bundleId;
            public System.Guid avatarId;
            public string address;
            public Domain.ObjectSnapshot snap;

            public Type GetInterfaceType()
            {
                return typeof(IConnectionObserver);
            }

            public void Invoke(object __target)
            {
                ((IConnectionObserver)__target).OnSpawnedGameObject(namePrefab, nameNotOwnedPrefab, localId, ownerId, bundleId, avatarId, address, snap);
            }
        }
    }

    public class ConnectionObserver : InterfacedObserver, IConnectionObserver
    {
        public ConnectionObserver()
            : base(null, 0)
        {
        }

        public ConnectionObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void ClientLoggedIn(System.Guid clientid)
        {
            var payload = new IConnectionObserver_PayloadTable.ClientLoggedIn_Invoke { clientid = clientid };
            Notify(payload);
        }

        public void OnSpawnedGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localId, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, string address, Domain.ObjectSnapshot snap)
        {
            var payload = new IConnectionObserver_PayloadTable.OnSpawnedGameObject_Invoke { namePrefab = namePrefab, nameNotOwnedPrefab = nameNotOwnedPrefab, localId = localId, ownerId = ownerId, bundleId = bundleId, avatarId = avatarId, address = address, snap = snap };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(IConnectionObserver))]
    public interface IConnectionObserverAsync : IInterfacedObserverSync
    {
        Task ClientLoggedIn(System.Guid clientid);
        Task OnSpawnedGameObject(string namePrefab, string nameNotOwnedPrefab, System.Guid localId, System.Guid ownerId, System.Guid bundleId, System.Guid avatarId, string address, Domain.ObjectSnapshot snap);
    }
}

#endregion
#region Domain.IGameObjectObserver

namespace Domain
{
    [PayloadTable(typeof(IGameObjectObserver), PayloadTableKind.Notification)]
    public static class IGameObjectObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(DestroyObject_Invoke),
                typeof(SendBehaviourMessagePackToClient_Invoke),
                typeof(SendBehaviourMessageToClient_Invoke),
            };
        }

        public class DestroyObject_Invoke : IInterfacedPayload, IInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObjectObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObjectObserver)__target).DestroyObject();
            }
        }

        public class SendBehaviourMessagePackToClient_Invoke : IInterfacedPayload, IInvokable
        {
            public Domain.BehaviourMessages.JediumBehaviourMessage[] messages;

            public Type GetInterfaceType()
            {
                return typeof(IGameObjectObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObjectObserver)__target).SendBehaviourMessagePackToClient(messages);
            }
        }

        public class SendBehaviourMessageToClient_Invoke : IInterfacedPayload, IInvokable
        {
            public Domain.BehaviourMessages.JediumBehaviourMessage message;

            public Type GetInterfaceType()
            {
                return typeof(IGameObjectObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObjectObserver)__target).SendBehaviourMessageToClient(message);
            }
        }
    }

    public class GameObjectObserver : InterfacedObserver, IGameObjectObserver
    {
        public GameObjectObserver()
            : base(null, 0)
        {
        }

        public GameObjectObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void DestroyObject()
        {
            var payload = new IGameObjectObserver_PayloadTable.DestroyObject_Invoke {  };
            Notify(payload);
        }

        public void SendBehaviourMessagePackToClient(Domain.BehaviourMessages.JediumBehaviourMessage[] messages)
        {
            var payload = new IGameObjectObserver_PayloadTable.SendBehaviourMessagePackToClient_Invoke { messages = messages };
            Notify(payload);
        }

        public void SendBehaviourMessageToClient(Domain.BehaviourMessages.JediumBehaviourMessage message)
        {
            var payload = new IGameObjectObserver_PayloadTable.SendBehaviourMessageToClient_Invoke { message = message };
            Notify(payload);
        }
    }

    [AlternativeInterface(typeof(IGameObjectObserver))]
    public interface IGameObjectObserverAsync : IInterfacedObserverSync
    {
        Task DestroyObject();
        Task SendBehaviourMessagePackToClient(Domain.BehaviourMessages.JediumBehaviourMessage[] messages);
        Task SendBehaviourMessageToClient(Domain.BehaviourMessages.JediumBehaviourMessage message);
    }
}

#endregion
