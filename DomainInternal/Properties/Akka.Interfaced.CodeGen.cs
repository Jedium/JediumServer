// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;

#region DomainInternal.IBasicServerPlugin

namespace DomainInternal
{
    [PayloadTable(typeof(IBasicServerPlugin), PayloadTableKind.Request)]
    public static class IBasicServerPlugin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetInfo_Invoke), typeof(GetInfo_Return) },
                { typeof(PluginMessage_Invoke), null },
            };
        }

        public class GetInfo_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IBasicServerPlugin);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IBasicServerPlugin)__target).GetInfo();
                return (IValueGetable)(new GetInfo_Return { v = __v });
            }
        }

        public class GetInfo_Return
            : IInterfacedPayload, IValueGetable
        {
            public DomainInternal.PluginInfo v;

            public Type GetInterfaceType()
            {
                return typeof(IBasicServerPlugin);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class PluginMessage_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string msg;

            public Type GetInterfaceType()
            {
                return typeof(IBasicServerPlugin);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IBasicServerPlugin)__target).PluginMessage(msg);
                return null;
            }
        }
    }

    public interface IBasicServerPlugin_NoReply
    {
        void GetInfo();
        void PluginMessage(string msg);
    }

    public class BasicServerPluginRef : InterfacedActorRef, IBasicServerPlugin, IBasicServerPlugin_NoReply
    {
        public override Type InterfaceType => typeof(IBasicServerPlugin);

        public BasicServerPluginRef() : base(null)
        {
        }

        public BasicServerPluginRef(IRequestTarget target) : base(target)
        {
        }

        public BasicServerPluginRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IBasicServerPlugin_NoReply WithNoReply()
        {
            return this;
        }

        public BasicServerPluginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new BasicServerPluginRef(Target, requestWaiter, Timeout);
        }

        public BasicServerPluginRef WithTimeout(TimeSpan? timeout)
        {
            return new BasicServerPluginRef(Target, RequestWaiter, timeout);
        }

        public Task<DomainInternal.PluginInfo> GetInfo()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasicServerPlugin_PayloadTable.GetInfo_Invoke {  }
            };
            return SendRequestAndReceive<DomainInternal.PluginInfo>(requestMessage);
        }

        public Task PluginMessage(string msg)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasicServerPlugin_PayloadTable.PluginMessage_Invoke { msg = msg }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IBasicServerPlugin_NoReply.GetInfo()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasicServerPlugin_PayloadTable.GetInfo_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IBasicServerPlugin_NoReply.PluginMessage(string msg)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IBasicServerPlugin_PayloadTable.PluginMessage_Invoke { msg = msg }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IBasicServerPlugin))]
    public interface IBasicServerPluginSync : IInterfacedActorSync
    {
        DomainInternal.PluginInfo GetInfo();
        void PluginMessage(string msg);
    }
}

#endregion
#region DomainInternal.IDatabaseAgent

namespace DomainInternal
{
    [PayloadTable(typeof(IDatabaseAgent), PayloadTableKind.Request)]
    public static class IDatabaseAgent_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(AddSceneObject_Invoke), null },
                { typeof(CreateAvatar_Invoke), null },
                { typeof(CreateObjectServer_Invoke), null },
                { typeof(CreateScene_Invoke), null },
                { typeof(CreateUser_Invoke), null },
                { typeof(DeleteObjectBehaviours_Invoke), null },
                { typeof(DeleteSceneObject_Invoke), null },
                { typeof(GetAllBundles_Invoke), typeof(GetAllBundles_Return) },
                { typeof(GetAllServerObjects_Invoke), typeof(GetAllServerObjects_Return) },
                { typeof(GetAssetBundle_Invoke), typeof(GetAssetBundle_Return) },
                { typeof(GetAvatar_Invoke), typeof(GetAvatar_Return) },
                { typeof(GetObjectBehaviours_Invoke), typeof(GetObjectBehaviours_Return) },
                { typeof(GetObjectServer_Invoke), typeof(GetObjectServer_Return) },
                { typeof(GetObjectsScene_Invoke), typeof(GetObjectsScene_Return) },
                { typeof(GetScenes_Invoke), typeof(GetScenes_Return) },
                { typeof(GetUserByName_Invoke), typeof(GetUserByName_Return) },
                { typeof(GetUsers_Invoke), typeof(GetUsers_Return) },
                { typeof(SaveAssetBundle_Invoke), null },
                { typeof(SetDummyObjectTest_Invoke), null },
                { typeof(StoreDBBehaviour_Invoke), null },
                { typeof(UpdateAvatarProps_Invoke), null },
            };
        }

        public class AddSceneObject_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseSceneObject sceneObj;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).AddSceneObject(sceneObj);
                return null;
            }
        }

        public class CreateAvatar_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseAvatar avatar;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).CreateAvatar(avatar);
                return null;
            }
        }

        public class CreateObjectServer_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseObject dobject;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).CreateObjectServer(dobject);
                return null;
            }
        }

        public class CreateScene_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseScene scene;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).CreateScene(scene);
                return null;
            }
        }

        public class CreateUser_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseUser user;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).CreateUser(user);
                return null;
            }
        }

        public class DeleteObjectBehaviours_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid localId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).DeleteObjectBehaviours(localId);
                return null;
            }
        }

        public class DeleteSceneObject_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid localId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).DeleteSceneObject(localId);
                return null;
            }
        }

        public class GetAllBundles_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetAllBundles();
                return (IValueGetable)(new GetAllBundles_Return { v = __v });
            }
        }

        public class GetAllBundles_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseAssetBundle> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetAllServerObjects_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetAllServerObjects();
                return (IValueGetable)(new GetAllServerObjects_Return { v = __v });
            }
        }

        public class GetAllServerObjects_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseObject> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetAssetBundle_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid bundleId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetAssetBundle(bundleId);
                return (IValueGetable)(new GetAssetBundle_Return { v = __v });
            }
        }

        public class GetAssetBundle_Return
            : IInterfacedPayload, IValueGetable
        {
            public DomainInternal.DatabaseAssetBundle v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetAvatar_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid avatarId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetAvatar(avatarId);
                return (IValueGetable)(new GetAvatar_Return { v = __v });
            }
        }

        public class GetAvatar_Return
            : IInterfacedPayload, IValueGetable
        {
            public DomainInternal.DatabaseAvatar v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetObjectBehaviours_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid localId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetObjectBehaviours(localId);
                return (IValueGetable)(new GetObjectBehaviours_Return { v = __v });
            }
        }

        public class GetObjectBehaviours_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.Dictionary<string, DomainInternal.Behaviours.JediumBehaviourDBSnapshot> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetObjectServer_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid objectId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetObjectServer(objectId);
                return (IValueGetable)(new GetObjectServer_Return { v = __v });
            }
        }

        public class GetObjectServer_Return
            : IInterfacedPayload, IValueGetable
        {
            public DomainInternal.DatabaseObject v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetObjectsScene_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid sceneId;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetObjectsScene(sceneId);
                return (IValueGetable)(new GetObjectsScene_Return { v = __v });
            }
        }

        public class GetObjectsScene_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseSceneObject> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetScenes_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetScenes();
                return (IValueGetable)(new GetScenes_Return { v = __v });
            }
        }

        public class GetScenes_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseScene> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetUserByName_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string username;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetUserByName(username);
                return (IValueGetable)(new GetUserByName_Return { v = __v });
            }
        }

        public class GetUserByName_Return
            : IInterfacedPayload, IValueGetable
        {
            public DomainInternal.DatabaseUser v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetUsers_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IDatabaseAgent)__target).GetUsers();
                return (IValueGetable)(new GetUsers_Return { v = __v });
            }
        }

        public class GetUsers_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseUser> v;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class SaveAssetBundle_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseAssetBundle bundle;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).SaveAssetBundle(bundle);
                return null;
            }
        }

        public class SetDummyObjectTest_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).SetDummyObjectTest();
                return null;
            }
        }

        public class StoreDBBehaviour_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.Behaviours.JediumBehaviourDBSnapshot snap;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).StoreDBBehaviour(snap);
                return null;
            }
        }

        public class UpdateAvatarProps_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid userId;
            public string props;

            public Type GetInterfaceType()
            {
                return typeof(IDatabaseAgent);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IDatabaseAgent)__target).UpdateAvatarProps(userId, props);
                return null;
            }
        }
    }

    public interface IDatabaseAgent_NoReply
    {
        void AddSceneObject(DomainInternal.DatabaseSceneObject sceneObj);
        void CreateAvatar(DomainInternal.DatabaseAvatar avatar);
        void CreateObjectServer(DomainInternal.DatabaseObject dobject);
        void CreateScene(DomainInternal.DatabaseScene scene);
        void CreateUser(DomainInternal.DatabaseUser user);
        void DeleteObjectBehaviours(System.Guid localId);
        void DeleteSceneObject(System.Guid localId);
        void GetAllBundles();
        void GetAllServerObjects();
        void GetAssetBundle(System.Guid bundleId);
        void GetAvatar(System.Guid avatarId);
        void GetObjectBehaviours(System.Guid localId);
        void GetObjectServer(System.Guid objectId);
        void GetObjectsScene(System.Guid sceneId);
        void GetScenes();
        void GetUserByName(string username);
        void GetUsers();
        void SaveAssetBundle(DomainInternal.DatabaseAssetBundle bundle);
        void SetDummyObjectTest();
        void StoreDBBehaviour(DomainInternal.Behaviours.JediumBehaviourDBSnapshot snap);
        void UpdateAvatarProps(System.Guid userId, string props);
    }

    public class DatabaseAgentRef : InterfacedActorRef, IDatabaseAgent, IDatabaseAgent_NoReply
    {
        public override Type InterfaceType => typeof(IDatabaseAgent);

        public DatabaseAgentRef() : base(null)
        {
        }

        public DatabaseAgentRef(IRequestTarget target) : base(target)
        {
        }

        public DatabaseAgentRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IDatabaseAgent_NoReply WithNoReply()
        {
            return this;
        }

        public DatabaseAgentRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new DatabaseAgentRef(Target, requestWaiter, Timeout);
        }

        public DatabaseAgentRef WithTimeout(TimeSpan? timeout)
        {
            return new DatabaseAgentRef(Target, RequestWaiter, timeout);
        }

        public Task AddSceneObject(DomainInternal.DatabaseSceneObject sceneObj)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.AddSceneObject_Invoke { sceneObj = sceneObj }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CreateAvatar(DomainInternal.DatabaseAvatar avatar)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateAvatar_Invoke { avatar = avatar }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CreateObjectServer(DomainInternal.DatabaseObject dobject)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateObjectServer_Invoke { dobject = dobject }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CreateScene(DomainInternal.DatabaseScene scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateScene_Invoke { scene = scene }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task CreateUser(DomainInternal.DatabaseUser user)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateUser_Invoke { user = user }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task DeleteObjectBehaviours(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.DeleteObjectBehaviours_Invoke { localId = localId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task DeleteSceneObject(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.DeleteSceneObject_Invoke { localId = localId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseAssetBundle>> GetAllBundles()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAllBundles_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseAssetBundle>>(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseObject>> GetAllServerObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAllServerObjects_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseObject>>(requestMessage);
        }

        public Task<DomainInternal.DatabaseAssetBundle> GetAssetBundle(System.Guid bundleId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAssetBundle_Invoke { bundleId = bundleId }
            };
            return SendRequestAndReceive<DomainInternal.DatabaseAssetBundle>(requestMessage);
        }

        public Task<DomainInternal.DatabaseAvatar> GetAvatar(System.Guid avatarId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAvatar_Invoke { avatarId = avatarId }
            };
            return SendRequestAndReceive<DomainInternal.DatabaseAvatar>(requestMessage);
        }

        public Task<System.Collections.Generic.Dictionary<string, DomainInternal.Behaviours.JediumBehaviourDBSnapshot>> GetObjectBehaviours(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectBehaviours_Invoke { localId = localId }
            };
            return SendRequestAndReceive<System.Collections.Generic.Dictionary<string, DomainInternal.Behaviours.JediumBehaviourDBSnapshot>>(requestMessage);
        }

        public Task<DomainInternal.DatabaseObject> GetObjectServer(System.Guid objectId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectServer_Invoke { objectId = objectId }
            };
            return SendRequestAndReceive<DomainInternal.DatabaseObject>(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseSceneObject>> GetObjectsScene(System.Guid sceneId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectsScene_Invoke { sceneId = sceneId }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseSceneObject>>(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseScene>> GetScenes()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetScenes_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseScene>>(requestMessage);
        }

        public Task<DomainInternal.DatabaseUser> GetUserByName(string username)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetUserByName_Invoke { username = username }
            };
            return SendRequestAndReceive<DomainInternal.DatabaseUser>(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseUser>> GetUsers()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetUsers_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseUser>>(requestMessage);
        }

        public Task SaveAssetBundle(DomainInternal.DatabaseAssetBundle bundle)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.SaveAssetBundle_Invoke { bundle = bundle }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SetDummyObjectTest()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.SetDummyObjectTest_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task StoreDBBehaviour(DomainInternal.Behaviours.JediumBehaviourDBSnapshot snap)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.StoreDBBehaviour_Invoke { snap = snap }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UpdateAvatarProps(System.Guid userId, string props)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.UpdateAvatarProps_Invoke { userId = userId, props = props }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IDatabaseAgent_NoReply.AddSceneObject(DomainInternal.DatabaseSceneObject sceneObj)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.AddSceneObject_Invoke { sceneObj = sceneObj }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.CreateAvatar(DomainInternal.DatabaseAvatar avatar)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateAvatar_Invoke { avatar = avatar }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.CreateObjectServer(DomainInternal.DatabaseObject dobject)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateObjectServer_Invoke { dobject = dobject }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.CreateScene(DomainInternal.DatabaseScene scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateScene_Invoke { scene = scene }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.CreateUser(DomainInternal.DatabaseUser user)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.CreateUser_Invoke { user = user }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.DeleteObjectBehaviours(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.DeleteObjectBehaviours_Invoke { localId = localId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.DeleteSceneObject(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.DeleteSceneObject_Invoke { localId = localId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetAllBundles()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAllBundles_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetAllServerObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAllServerObjects_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetAssetBundle(System.Guid bundleId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAssetBundle_Invoke { bundleId = bundleId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetAvatar(System.Guid avatarId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetAvatar_Invoke { avatarId = avatarId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetObjectBehaviours(System.Guid localId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectBehaviours_Invoke { localId = localId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetObjectServer(System.Guid objectId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectServer_Invoke { objectId = objectId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetObjectsScene(System.Guid sceneId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetObjectsScene_Invoke { sceneId = sceneId }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetScenes()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetScenes_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetUserByName(string username)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetUserByName_Invoke { username = username }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.GetUsers()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.GetUsers_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.SaveAssetBundle(DomainInternal.DatabaseAssetBundle bundle)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.SaveAssetBundle_Invoke { bundle = bundle }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.SetDummyObjectTest()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.SetDummyObjectTest_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.StoreDBBehaviour(DomainInternal.Behaviours.JediumBehaviourDBSnapshot snap)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.StoreDBBehaviour_Invoke { snap = snap }
            };
            SendRequest(requestMessage);
        }

        void IDatabaseAgent_NoReply.UpdateAvatarProps(System.Guid userId, string props)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IDatabaseAgent_PayloadTable.UpdateAvatarProps_Invoke { userId = userId, props = props }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IDatabaseAgent))]
    public interface IDatabaseAgentSync : IInterfacedActorSync
    {
        void AddSceneObject(DomainInternal.DatabaseSceneObject sceneObj);
        void CreateAvatar(DomainInternal.DatabaseAvatar avatar);
        void CreateObjectServer(DomainInternal.DatabaseObject dobject);
        void CreateScene(DomainInternal.DatabaseScene scene);
        void CreateUser(DomainInternal.DatabaseUser user);
        void DeleteObjectBehaviours(System.Guid localId);
        void DeleteSceneObject(System.Guid localId);
        System.Collections.Generic.List<DomainInternal.DatabaseAssetBundle> GetAllBundles();
        System.Collections.Generic.List<DomainInternal.DatabaseObject> GetAllServerObjects();
        DomainInternal.DatabaseAssetBundle GetAssetBundle(System.Guid bundleId);
        DomainInternal.DatabaseAvatar GetAvatar(System.Guid avatarId);
        System.Collections.Generic.Dictionary<string, DomainInternal.Behaviours.JediumBehaviourDBSnapshot> GetObjectBehaviours(System.Guid localId);
        DomainInternal.DatabaseObject GetObjectServer(System.Guid objectId);
        System.Collections.Generic.List<DomainInternal.DatabaseSceneObject> GetObjectsScene(System.Guid sceneId);
        System.Collections.Generic.List<DomainInternal.DatabaseScene> GetScenes();
        DomainInternal.DatabaseUser GetUserByName(string username);
        System.Collections.Generic.List<DomainInternal.DatabaseUser> GetUsers();
        void SaveAssetBundle(DomainInternal.DatabaseAssetBundle bundle);
        void SetDummyObjectTest();
        void StoreDBBehaviour(DomainInternal.Behaviours.JediumBehaviourDBSnapshot snap);
        void UpdateAvatarProps(System.Guid userId, string props);
    }
}

#endregion
#region DomainInternal.IObjectsManager

namespace DomainInternal
{
    [PayloadTable(typeof(IObjectsManager), PayloadTableKind.Request)]
    public static class IObjectsManager_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetLoadedScenesList_Invoke), typeof(GetLoadedScenesList_Return) },
                { typeof(GetSceneObjects_Invoke), typeof(GetSceneObjects_Return) },
                { typeof(LoadAllScenes_Invoke), null },
                { typeof(LoadObjects_Invoke), null },
                { typeof(SaveObjectsToDB_Invoke), null },
            };
        }

        public class GetLoadedScenesList_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IObjectsManager)__target).GetLoadedScenesList();
                return (IValueGetable)(new GetLoadedScenesList_Return { v = __v });
            }
        }

        public class GetLoadedScenesList_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<System.Tuple<System.Guid, string, string>> v;

            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetSceneObjects_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public System.Guid scene;

            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IObjectsManager)__target).GetSceneObjects(scene);
                return (IValueGetable)(new GetSceneObjects_Return { v = __v });
            }
        }

        public class GetSceneObjects_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<System.Tuple<System.Guid, string>> v;

            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class LoadAllScenes_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IObjectsManager)__target).LoadAllScenes();
                return null;
            }
        }

        public class LoadObjects_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IObjectsManager)__target).LoadObjects();
                return null;
            }
        }

        public class SaveObjectsToDB_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IObjectsManager);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IObjectsManager)__target).SaveObjectsToDB();
                return null;
            }
        }
    }

    public interface IObjectsManager_NoReply
    {
        void GetLoadedScenesList();
        void GetSceneObjects(System.Guid scene);
        void LoadAllScenes();
        void LoadObjects();
        void SaveObjectsToDB();
    }

    public class ObjectsManagerRef : InterfacedActorRef, IObjectsManager, IObjectsManager_NoReply
    {
        public override Type InterfaceType => typeof(IObjectsManager);

        public ObjectsManagerRef() : base(null)
        {
        }

        public ObjectsManagerRef(IRequestTarget target) : base(target)
        {
        }

        public ObjectsManagerRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IObjectsManager_NoReply WithNoReply()
        {
            return this;
        }

        public ObjectsManagerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new ObjectsManagerRef(Target, requestWaiter, Timeout);
        }

        public ObjectsManagerRef WithTimeout(TimeSpan? timeout)
        {
            return new ObjectsManagerRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Collections.Generic.List<System.Tuple<System.Guid, string, string>>> GetLoadedScenesList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.GetLoadedScenesList_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.Tuple<System.Guid, string, string>>>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.Tuple<System.Guid, string>>> GetSceneObjects(System.Guid scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.GetSceneObjects_Invoke { scene = scene }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.Tuple<System.Guid, string>>>(requestMessage);
        }

        public Task LoadAllScenes()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.LoadAllScenes_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task LoadObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.LoadObjects_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task SaveObjectsToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.SaveObjectsToDB_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IObjectsManager_NoReply.GetLoadedScenesList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.GetLoadedScenesList_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IObjectsManager_NoReply.GetSceneObjects(System.Guid scene)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.GetSceneObjects_Invoke { scene = scene }
            };
            SendRequest(requestMessage);
        }

        void IObjectsManager_NoReply.LoadAllScenes()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.LoadAllScenes_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IObjectsManager_NoReply.LoadObjects()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.LoadObjects_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IObjectsManager_NoReply.SaveObjectsToDB()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IObjectsManager_PayloadTable.SaveObjectsToDB_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IObjectsManager))]
    public interface IObjectsManagerSync : IInterfacedActorSync
    {
        System.Collections.Generic.List<System.Tuple<System.Guid, string, string>> GetLoadedScenesList();
        System.Collections.Generic.List<System.Tuple<System.Guid, string>> GetSceneObjects(System.Guid scene);
        void LoadAllScenes();
        void LoadObjects();
        void SaveObjectsToDB();
    }
}

#endregion
#region DomainInternal.IPluginsHost

namespace DomainInternal
{
    [PayloadTable(typeof(IPluginsHost), PayloadTableKind.Request)]
    public static class IPluginsHost_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(LoadPlugins_Invoke), null },
            };
        }

        public class LoadPlugins_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IPluginsHost);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IPluginsHost)__target).LoadPlugins();
                return null;
            }
        }
    }

    public interface IPluginsHost_NoReply
    {
        void LoadPlugins();
    }

    public class PluginsHostRef : InterfacedActorRef, IPluginsHost, IPluginsHost_NoReply
    {
        public override Type InterfaceType => typeof(IPluginsHost);

        public PluginsHostRef() : base(null)
        {
        }

        public PluginsHostRef(IRequestTarget target) : base(target)
        {
        }

        public PluginsHostRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IPluginsHost_NoReply WithNoReply()
        {
            return this;
        }

        public PluginsHostRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new PluginsHostRef(Target, requestWaiter, Timeout);
        }

        public PluginsHostRef WithTimeout(TimeSpan? timeout)
        {
            return new PluginsHostRef(Target, RequestWaiter, timeout);
        }

        public Task LoadPlugins()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPluginsHost_PayloadTable.LoadPlugins_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IPluginsHost_NoReply.LoadPlugins()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IPluginsHost_PayloadTable.LoadPlugins_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(IPluginsHost))]
    public interface IPluginsHostSync : IInterfacedActorSync
    {
        void LoadPlugins();
    }
}

#endregion
#region DomainInternal.ITerminalConnection

namespace DomainInternal
{
    [PayloadTable(typeof(ITerminalConnection), PayloadTableKind.Request)]
    public static class ITerminalConnection_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(CreateUser_Invoke), typeof(CreateUser_Return) },
                { typeof(ExecuteCommand_Invoke), typeof(ExecuteCommand_Return) },
                { typeof(GetUsers_Invoke), typeof(GetUsers_Return) },
            };
        }

        public class CreateUser_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public DomainInternal.DatabaseUser user;

            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ITerminalConnection)__target).CreateUser(user);
                return (IValueGetable)(new CreateUser_Return { v = __v });
            }
        }

        public class CreateUser_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Tuple<bool, string> v;

            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class ExecuteCommand_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public string command;

            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ITerminalConnection)__target).ExecuteCommand(command);
                return (IValueGetable)(new ExecuteCommand_Return { v = __v });
            }
        }

        public class ExecuteCommand_Return
            : IInterfacedPayload, IValueGetable
        {
            public string v;

            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }

        public class GetUsers_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((ITerminalConnection)__target).GetUsers();
                return (IValueGetable)(new GetUsers_Return { v = __v });
            }
        }

        public class GetUsers_Return
            : IInterfacedPayload, IValueGetable
        {
            public System.Collections.Generic.List<DomainInternal.DatabaseUser> v;

            public Type GetInterfaceType()
            {
                return typeof(ITerminalConnection);
            }

            public object Value
            {
                get { return v; }
            }
        }
    }

    public interface ITerminalConnection_NoReply
    {
        void CreateUser(DomainInternal.DatabaseUser user);
        void ExecuteCommand(string command);
        void GetUsers();
    }

    public class TerminalConnectionRef : InterfacedActorRef, ITerminalConnection, ITerminalConnection_NoReply
    {
        public override Type InterfaceType => typeof(ITerminalConnection);

        public TerminalConnectionRef() : base(null)
        {
        }

        public TerminalConnectionRef(IRequestTarget target) : base(target)
        {
        }

        public TerminalConnectionRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public ITerminalConnection_NoReply WithNoReply()
        {
            return this;
        }

        public TerminalConnectionRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new TerminalConnectionRef(Target, requestWaiter, Timeout);
        }

        public TerminalConnectionRef WithTimeout(TimeSpan? timeout)
        {
            return new TerminalConnectionRef(Target, RequestWaiter, timeout);
        }

        public Task<System.Tuple<bool, string>> CreateUser(DomainInternal.DatabaseUser user)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.CreateUser_Invoke { user = user }
            };
            return SendRequestAndReceive<System.Tuple<bool, string>>(requestMessage);
        }

        public Task<string> ExecuteCommand(string command)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.ExecuteCommand_Invoke { command = command }
            };
            return SendRequestAndReceive<string>(requestMessage);
        }

        public Task<System.Collections.Generic.List<DomainInternal.DatabaseUser>> GetUsers()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.GetUsers_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<DomainInternal.DatabaseUser>>(requestMessage);
        }

        void ITerminalConnection_NoReply.CreateUser(DomainInternal.DatabaseUser user)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.CreateUser_Invoke { user = user }
            };
            SendRequest(requestMessage);
        }

        void ITerminalConnection_NoReply.ExecuteCommand(string command)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.ExecuteCommand_Invoke { command = command }
            };
            SendRequest(requestMessage);
        }

        void ITerminalConnection_NoReply.GetUsers()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new ITerminalConnection_PayloadTable.GetUsers_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [AlternativeInterface(typeof(ITerminalConnection))]
    public interface ITerminalConnectionSync : IInterfacedActorSync
    {
        System.Tuple<bool, string> CreateUser(DomainInternal.DatabaseUser user);
        string ExecuteCommand(string command);
        System.Collections.Generic.List<DomainInternal.DatabaseUser> GetUsers();
    }
}

#endregion
#region DomainInternal.IWebApiHost

namespace DomainInternal
{
    [PayloadTable(typeof(IWebApiHost), PayloadTableKind.Request)]
    public static class IWebApiHost_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
            };
        }
    }

    public interface IWebApiHost_NoReply
    {
    }

    public class WebApiHostRef : InterfacedActorRef, IWebApiHost, IWebApiHost_NoReply
    {
        public override Type InterfaceType => typeof(IWebApiHost);

        public WebApiHostRef() : base(null)
        {
        }

        public WebApiHostRef(IRequestTarget target) : base(target)
        {
        }

        public WebApiHostRef(IRequestTarget target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
        }

        public IWebApiHost_NoReply WithNoReply()
        {
            return this;
        }

        public WebApiHostRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new WebApiHostRef(Target, requestWaiter, Timeout);
        }

        public WebApiHostRef WithTimeout(TimeSpan? timeout)
        {
            return new WebApiHostRef(Target, RequestWaiter, timeout);
        }
    }

    [AlternativeInterface(typeof(IWebApiHost))]
    public interface IWebApiHostSync : IInterfacedActorSync
    {
    }
}

#endregion
